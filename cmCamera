#center of mass camera. Tamb√©m gera estrelas
import pygame
import random

vec = pygame.Vector2
backgroundSize = vec(5000,5000)

class camMov():
    def __init__(self,superficie, bodyList,screenCenter):
        self.bodyList = bodyList
        self.superficie = superficie
        self.screenCenter = screenCenter
        self.NStars = 6000
        self.W = []
        self.H = []
        
        self.R = []
        for i in range(self.NStars):
            
            self.W.append(random.randint(-backgroundSize.x/2,backgroundSize.x/2))
            self.H.append(random.randint(-backgroundSize.y/2, backgroundSize.y/2))
            self.R.append(random.randint(0,4))

#calcula o centro de massa e transforma corpo.v em coordenadas pygame em corpo.v em coordenadas do CM
    def defineCM(self):
        vcm = vec(0,0)
        rcm= vec(0,0)
        M = 0
        for i in self.bodyList:
            vcm += i.m * i.v
            rcm+= i.m * i.r
            M += i.m
        
        #posicao relativa ao CM, no centro
        cameraCenter = rcm/M - self.screenCenter
        for i in self.bodyList:
            i.r -= cameraCenter
            i.traj.append(i.r)
            i.v -= vcm/M
            
        #desenha o centro de massa
        pygame.draw.circle(self.superficie,(255,255,255),rcm/M,10)
        
       
        return([rcm/M, vcm/M])


#atualiza as posicoes guardadas na lista para cada estrela.
    def moveStars(self):
        vCM = self.defineCM()[1]
        #print(self.CM()[0])
        #print(vCM)
        for i in range(self.NStars):
            
            self.W[i] -= vCM.x
            self.H[i] -= vCM.y
            pygame.draw.circle(self.superficie, (255,255,255), (self.W[i], self.H[i]), self.R[i])
       #
